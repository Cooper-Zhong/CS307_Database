Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.alibaba.fastjson.JSON;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.sql.*;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class Main {\n    private static final int BATCH_SIZE = 2000;\n    private static Connection con = null;\n    private static PreparedStatement stmt = null;//global statement for all inserts\n    private static PreparedStatement stmt1 = null;// for authors followed by\n    private static PreparedStatement stmt2 = null;// for authors favorite\n    private static PreparedStatement stmt3 = null;// for authors shared\n    private static PreparedStatement stmt4 = null;// for authors liked\n    static List<Post> posts;\n    static List<Replies> replies;\n\n    public static void main(String[] args) {\n        Properties prop = loadDBUser();\n        loadPostsFile();\n        loadRepliesFile();\n        // Empty target table\n        openDB(prop);\n        clearDataInTable();\n        closeDB();\n\n        int cnt = 0;\n        long start = System.currentTimeMillis();\n        openDB(prop);\n\n        prepareStatement();\n        for (Post post : posts) {\n            //here post is an object with all the attributes.\n            loadAuthor(post);\n            cnt++;\n//            if (cnt % 1000 == 0) {\n//                System.out.println(\"insert \" + 1000 + \" data successfully!\");\n//            }\n        }\n\n//        for (Replies reply : replies) {\n//            //here reply is an object with all the attributes.\n//            loadReply(reply);\n//            cnt++;\n//            if (cnt % 1000 == 0) {\n//                System.out.println(\"insert \" + 1000 + \" data successfully!\");\n//            }\n//        }\n\n        try {\n            con.commit();\n        } catch (SQLException ex) {\n            throw new RuntimeException(ex);\n        }\n        closeDB();\n        long end = System.currentTimeMillis();\n        System.out.println(cnt + \" records successfully loaded\");\n        System.out.println(\"Loading speed : \" + (cnt * 1000L) / (end - start) + \" records/s\");\n    }\n\n\n    private static void openDB(Properties prop) {\n        try {\n            Class.forName(\"org.postgresql.Driver\");\n        } catch (Exception e) {\n            System.err.println(\"Cannot find the Postgres driver. Check CLASSPATH.\");\n            System.exit(1);\n        }\n        String url = \"jdbc:postgresql://\" + prop.getProperty(\"host\") + \"/\" + prop.getProperty(\"database\");\n        try {\n            con = DriverManager.getConnection(url, prop);\n            if (con != null) {\n                System.out.println(\"Successfully connected to the database \"\n                        + prop.getProperty(\"database\") + \" as \" + prop.getProperty(\"user\"));\n                con.setAutoCommit(false);\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Database connection failed\");\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    private static void closeDB() {\n        if (con != null) {\n            try {\n                if (stmt != null) {\n                    stmt.close();\n                }\n                con.close();\n                con = null;\n            } catch (Exception ignored) {\n            }\n        }\n    }\n\n    private static Properties loadDBUser() {\n        Properties properties = new Properties();\n        try {\n            properties.load(new InputStreamReader(new FileInputStream(\"resources/dbUser.properties\")));\n            return properties;\n        } catch (IOException e) {\n            System.err.println(\"can not find db user file\");\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void loadPostsFile() {\n        try {\n            String jsonStrings = Files.readString(Path.of(\"posts.json\"));\n            posts = JSON.parseArray(jsonStrings, Post.class);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void loadRepliesFile() {\n        try {\n            String jsonStrings = Files.readString(Path.of(\"replies.json\"));\n            replies = JSON.parseArray(jsonStrings, Replies.class);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    /**\n     * rewrite the insert statement later!\n     */\n\n    public static void prepareStatement() {// authors in one post json\n        try {\n            stmt = con.prepareStatement(\"INSERT INTO public.authors (author_name, author_registration_time, author_phone,author_id_card) \" +\n                    \"VALUES (?,?,?,?) on conflict(author_name) do nothing;\");\n            //the first serial number is not included in the insert statement.\n            //if duplicate, do nothing\n\n            stmt1 = con.prepareStatement(\"INSERT INTO public.authors (author_name, author_registration_time) \" +\n                    \"VALUES (?,?) on conflict(author_name) do nothing;\");\n            //the first serial number is not included in the insert statement.\n            // phone and id card are null,registration time is randomly generated\n\n            stmt2 = con.prepareStatement(\"insert into public.posts (post_id,title,content,post_time,post_city,post_author_id)\" +\n                    \"values (?,?,?,?,?,(select authors.author_id from authors where author_name = ?)) on conflict(post_id) do nothing;\");\n\n            stmt3 = con.prepareStatement(\"insert into public.categories(category_name)\" +\n                    \" values (?) on conflict(category_name) do nothing;\");\n\n            stmt4 = con.prepareStatement(\"insert into public.post_category(post_id,category_id)\" +\n                    \" values (?,(select categories.category_id from categories where category_name = ?)) \" +\n                    \"on conflict(post_id,category_id) do nothing;\");\n\n\n        } catch (SQLException e) {\n            System.err.println(\"Insert statement failed\");\n            System.err.println(e.getMessage());\n            closeDB();\n            System.exit(1);\n        }\n    }\n\n\n    /**\n     * clear data in table before import each time, to compare the speed of different import methods.\n     */\n    public static void clearDataInTable() {\n        Statement stmt0;\n        if (con != null) {\n            try {//rewrite later\n                stmt0 = con.createStatement();\n                //authors\n                stmt0.executeUpdate(\"drop table authors cascade;\");\n                con.commit();\n                stmt0.executeUpdate(\"create table if not exists authors(\\n\" +\n                        \"author_id SERIAL primary key\\n,\" +\n                        \"author_name              text not null unique,\" +\n                        \"author_registration_time TIMESTAMP,\" +\n                        \"author_phone             text,\" +\n                        \"author_id_card           text\" +\n                        \");\");\n                con.commit();\n\n                //posts\n                stmt0.executeUpdate(\"drop table posts cascade;\");\n                con.commit();\n                stmt0.executeUpdate(\"create table if not exists posts(\\n\" +\n                        \"post_id SERIAL primary key,\" +\n                        \"title              text not null,\" +\n                        \"content            text not null,\" +\n                        \"post_time               TIMESTAMP,\" +\n                        \"post_city               text,\" +\n                        \"post_author_id INTEGER references authors (author_id) not null\" +\n                        \");\");\n                con.commit();\n                // categories\n                stmt0.executeUpdate(\"drop table categories cascade;\");\n                con.commit();\n                stmt0.executeUpdate(\"create table if not exists categories(\\n\" +\n                        \"category_id SERIAL primary key,\" +\n                        \"category_name              text not null unique\" +\n                        \");\");\n                con.commit();\n\n                //post_category (relation table)\n                stmt0.executeUpdate(\"drop table post_category cascade;\");\n                con.commit();\n                stmt0.executeUpdate(\"create table if not exists post_category(\\n\" +\n                        \"post_id INTEGER references posts (post_id) not null,\" +\n                        \"category_id INTEGER references categories (category_id) not null,\" +\n                        \"primary key (post_id,category_id)\" +\n                        \");\");\n                con.commit();\n\n\n\n                stmt0.close();\n            } catch (SQLException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    }\n\n    /**\n     * Process one post/reply object\n     *\n     * @param post\n     */\n    private static void loadAuthor(Post post) {\n        //access info through getter method.\n        int postID = post.getPostID();\n        String title = post.getTitle();\n        List<String> category = post.getCategory();\n        String content = post.getContent();\n        String postingTime = post.getPostingTime();\n        String postingCity = post.getPostingCity();\n        String authorName = post.getAuthorName();\n        Timestamp authorRegistrationTime = post.getAuthorRegistrationTime();\n        String authorID = post.getAuthorID();//id card number\n        String authorPhone = post.getAuthorPhone();\n        List<String> authorsFollowedBy = post.getAuthorsFollowedBy();\n        List<String> authorFavorite = post.getAuthorFavorite();\n        List<String> authorShared = post.getAuthorShared();\n        List<String> authorLiked = post.getAuthorLiked();\n\n        if (con != null) {\n            try {\n                //pass in attributes\n                //post authors\n                stmt.setString(1, authorName);\n                stmt.setTimestamp(2, authorRegistrationTime);\n                stmt.setString(3, authorPhone);\n                stmt.setString(4, authorID);\n                stmt.executeUpdate();\n\n                //authors in followed list\n                for (String followedAuthor : authorsFollowedBy) {\n                    Timestamp ts = new Timestamp(System.currentTimeMillis());\n                    stmt1.setString(1, followedAuthor);\n                    stmt1.setTimestamp(2, ts);\n                    stmt1.executeUpdate();\n                }\n                //authors in favorite list\n                for (String favoriteAuthor : authorFavorite) {\n                    Timestamp ts = new Timestamp(System.currentTimeMillis());\n                    stmt1.setString(1, favoriteAuthor);\n                    stmt1.setTimestamp(2, ts);\n                    stmt1.executeUpdate();\n                }\n                //authors in shared list\n                for (String sharedAuthor : authorShared) {\n                    Timestamp ts = new Timestamp(System.currentTimeMillis());\n                    stmt1.setString(1, sharedAuthor);\n                    stmt1.setTimestamp(2, ts);\n                    stmt1.executeUpdate();\n                }\n                //authors in liked list\n                for (String likedAuthor : authorLiked) {\n                    Timestamp ts = new Timestamp(System.currentTimeMillis());\n                    stmt1.setString(1, likedAuthor);\n                    stmt1.setTimestamp(2, ts);\n                    stmt1.executeUpdate();\n                }\n\n                //load post info\n                stmt2.setInt(1, postID);\n                stmt2.setString(2, title);\n                stmt2.setString(3, content);\n                stmt2.setTimestamp(4, Timestamp.valueOf(postingTime));\n                stmt2.setString(5, postingCity);\n                stmt2.setString(6, authorName);\n                stmt2.executeUpdate();\n\n                //load category info\n                for (String category1 : category) {\n                    stmt3.setString(1, category1);\n                    stmt3.executeUpdate();\n                }\n\n//                load post_category relation table\n                for (String category1 : category) {\n                    stmt4.setInt(1, postID);\n                    stmt4.setString(2, category1);\n                    stmt4.executeUpdate();\n                }\n\n\n//                stmt.addBatch();\n            } catch (SQLException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    }\n\n    private static void loadReply(Replies reply) {\n        int postID = reply.getPostID();\n        String replyContent = reply.getReplyContent();\n        int replyStars = reply.getReplyStars();\n        String replyAuthor = reply.getReplyAuthor();\n        String secondaryReplyContent = reply.getSecondaryReplyContent();\n        int secondaryReplyStars = reply.getSecondaryReplyStars();\n        String secondaryReplyAuthor = reply.getSecondaryReplyAuthor();\n        if (con != null) {\n            try {\n                //pass in attributes\n//                stmt.setInt(1, Integer.parseInt(lineData[0]));\n//                stmt.setString(2, lineData[1]);\n//                stmt.setString(3, lineData[2]);\n//                stmt.setInt(4, Integer.parseInt(lineData[3]));\n//                stmt.setInt(5, Integer.parseInt(lineData[4]));\n                stmt.executeUpdate();\n            } catch (SQLException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 1e0e7b6e0dc90c06d58af721a7bf1d0f6dbecd03)
+++ b/src/Main.java	(date 1681638166902)
@@ -1,343 +1,5 @@
-import com.alibaba.fastjson.JSON;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.sql.*;
-import java.util.List;
-import java.util.Properties;
-
 public class Main {
-    private static final int BATCH_SIZE = 2000;
-    private static Connection con = null;
-    private static PreparedStatement stmt = null;//global statement for all inserts
-    private static PreparedStatement stmt1 = null;// for authors followed by
-    private static PreparedStatement stmt2 = null;// for authors favorite
-    private static PreparedStatement stmt3 = null;// for authors shared
-    private static PreparedStatement stmt4 = null;// for authors liked
-    static List<Post> posts;
-    static List<Replies> replies;
-
     public static void main(String[] args) {
-        Properties prop = loadDBUser();
-        loadPostsFile();
-        loadRepliesFile();
-        // Empty target table
-        openDB(prop);
-        clearDataInTable();
-        closeDB();
-
-        int cnt = 0;
-        long start = System.currentTimeMillis();
-        openDB(prop);
-
-        prepareStatement();
-        for (Post post : posts) {
-            //here post is an object with all the attributes.
-            loadAuthor(post);
-            cnt++;
-//            if (cnt % 1000 == 0) {
-//                System.out.println("insert " + 1000 + " data successfully!");
-//            }
-        }
-
-//        for (Replies reply : replies) {
-//            //here reply is an object with all the attributes.
-//            loadReply(reply);
-//            cnt++;
-//            if (cnt % 1000 == 0) {
-//                System.out.println("insert " + 1000 + " data successfully!");
-//            }
-//        }
-
-        try {
-            con.commit();
-        } catch (SQLException ex) {
-            throw new RuntimeException(ex);
-        }
-        closeDB();
-        long end = System.currentTimeMillis();
-        System.out.println(cnt + " records successfully loaded");
-        System.out.println("Loading speed : " + (cnt * 1000L) / (end - start) + " records/s");
-    }
-
-
-    private static void openDB(Properties prop) {
-        try {
-            Class.forName("org.postgresql.Driver");
-        } catch (Exception e) {
-            System.err.println("Cannot find the Postgres driver. Check CLASSPATH.");
-            System.exit(1);
-        }
-        String url = "jdbc:postgresql://" + prop.getProperty("host") + "/" + prop.getProperty("database");
-        try {
-            con = DriverManager.getConnection(url, prop);
-            if (con != null) {
-                System.out.println("Successfully connected to the database "
-                        + prop.getProperty("database") + " as " + prop.getProperty("user"));
-                con.setAutoCommit(false);
-            }
-        } catch (SQLException e) {
-            System.err.println("Database connection failed");
-            System.err.println(e.getMessage());
-            System.exit(1);
-        }
-    }
-
-    private static void closeDB() {
-        if (con != null) {
-            try {
-                if (stmt != null) {
-                    stmt.close();
-                }
-                con.close();
-                con = null;
-            } catch (Exception ignored) {
-            }
-        }
-    }
-
-    private static Properties loadDBUser() {
-        Properties properties = new Properties();
-        try {
-            properties.load(new InputStreamReader(new FileInputStream("resources/dbUser.properties")));
-            return properties;
-        } catch (IOException e) {
-            System.err.println("can not find db user file");
-            throw new RuntimeException(e);
-        }
-    }
-
-    private static void loadPostsFile() {
-        try {
-            String jsonStrings = Files.readString(Path.of("posts.json"));
-            posts = JSON.parseArray(jsonStrings, Post.class);
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private static void loadRepliesFile() {
-        try {
-            String jsonStrings = Files.readString(Path.of("replies.json"));
-            replies = JSON.parseArray(jsonStrings, Replies.class);
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-
-    /**
-     * rewrite the insert statement later!
-     */
-
-    public static void prepareStatement() {// authors in one post json
-        try {
-            stmt = con.prepareStatement("INSERT INTO public.authors (author_name, author_registration_time, author_phone,author_id_card) " +
-                    "VALUES (?,?,?,?) on conflict(author_name) do nothing;");
-            //the first serial number is not included in the insert statement.
-            //if duplicate, do nothing
-
-            stmt1 = con.prepareStatement("INSERT INTO public.authors (author_name, author_registration_time) " +
-                    "VALUES (?,?) on conflict(author_name) do nothing;");
-            //the first serial number is not included in the insert statement.
-            // phone and id card are null,registration time is randomly generated
-
-            stmt2 = con.prepareStatement("insert into public.posts (post_id,title,content,post_time,post_city,post_author_id)" +
-                    "values (?,?,?,?,?,(select authors.author_id from authors where author_name = ?)) on conflict(post_id) do nothing;");
-
-            stmt3 = con.prepareStatement("insert into public.categories(category_name)" +
-                    " values (?) on conflict(category_name) do nothing;");
-
-            stmt4 = con.prepareStatement("insert into public.post_category(post_id,category_id)" +
-                    " values (?,(select categories.category_id from categories where category_name = ?)) " +
-                    "on conflict(post_id,category_id) do nothing;");
-
-
-        } catch (SQLException e) {
-            System.err.println("Insert statement failed");
-            System.err.println(e.getMessage());
-            closeDB();
-            System.exit(1);
-        }
-    }
-
-
-    /**
-     * clear data in table before import each time, to compare the speed of different import methods.
-     */
-    public static void clearDataInTable() {
-        Statement stmt0;
-        if (con != null) {
-            try {//rewrite later
-                stmt0 = con.createStatement();
-                //authors
-                stmt0.executeUpdate("drop table authors cascade;");
-                con.commit();
-                stmt0.executeUpdate("create table if not exists authors(\n" +
-                        "author_id SERIAL primary key\n," +
-                        "author_name              text not null unique," +
-                        "author_registration_time TIMESTAMP," +
-                        "author_phone             text," +
-                        "author_id_card           text" +
-                        ");");
-                con.commit();
-
-                //posts
-                stmt0.executeUpdate("drop table posts cascade;");
-                con.commit();
-                stmt0.executeUpdate("create table if not exists posts(\n" +
-                        "post_id SERIAL primary key," +
-                        "title              text not null," +
-                        "content            text not null," +
-                        "post_time               TIMESTAMP," +
-                        "post_city               text," +
-                        "post_author_id INTEGER references authors (author_id) not null" +
-                        ");");
-                con.commit();
-                // categories
-                stmt0.executeUpdate("drop table categories cascade;");
-                con.commit();
-                stmt0.executeUpdate("create table if not exists categories(\n" +
-                        "category_id SERIAL primary key," +
-                        "category_name              text not null unique" +
-                        ");");
-                con.commit();
-
-                //post_category (relation table)
-                stmt0.executeUpdate("drop table post_category cascade;");
-                con.commit();
-                stmt0.executeUpdate("create table if not exists post_category(\n" +
-                        "post_id INTEGER references posts (post_id) not null," +
-                        "category_id INTEGER references categories (category_id) not null," +
-                        "primary key (post_id,category_id)" +
-                        ");");
-                con.commit();
-
-
-
-                stmt0.close();
-            } catch (SQLException ex) {
-                throw new RuntimeException(ex);
-            }
-        }
-    }
-
-    /**
-     * Process one post/reply object
-     *
-     * @param post
-     */
-    private static void loadAuthor(Post post) {
-        //access info through getter method.
-        int postID = post.getPostID();
-        String title = post.getTitle();
-        List<String> category = post.getCategory();
-        String content = post.getContent();
-        String postingTime = post.getPostingTime();
-        String postingCity = post.getPostingCity();
-        String authorName = post.getAuthorName();
-        Timestamp authorRegistrationTime = post.getAuthorRegistrationTime();
-        String authorID = post.getAuthorID();//id card number
-        String authorPhone = post.getAuthorPhone();
-        List<String> authorsFollowedBy = post.getAuthorsFollowedBy();
-        List<String> authorFavorite = post.getAuthorFavorite();
-        List<String> authorShared = post.getAuthorShared();
-        List<String> authorLiked = post.getAuthorLiked();
-
-        if (con != null) {
-            try {
-                //pass in attributes
-                //post authors
-                stmt.setString(1, authorName);
-                stmt.setTimestamp(2, authorRegistrationTime);
-                stmt.setString(3, authorPhone);
-                stmt.setString(4, authorID);
-                stmt.executeUpdate();
-
-                //authors in followed list
-                for (String followedAuthor : authorsFollowedBy) {
-                    Timestamp ts = new Timestamp(System.currentTimeMillis());
-                    stmt1.setString(1, followedAuthor);
-                    stmt1.setTimestamp(2, ts);
-                    stmt1.executeUpdate();
-                }
-                //authors in favorite list
-                for (String favoriteAuthor : authorFavorite) {
-                    Timestamp ts = new Timestamp(System.currentTimeMillis());
-                    stmt1.setString(1, favoriteAuthor);
-                    stmt1.setTimestamp(2, ts);
-                    stmt1.executeUpdate();
-                }
-                //authors in shared list
-                for (String sharedAuthor : authorShared) {
-                    Timestamp ts = new Timestamp(System.currentTimeMillis());
-                    stmt1.setString(1, sharedAuthor);
-                    stmt1.setTimestamp(2, ts);
-                    stmt1.executeUpdate();
-                }
-                //authors in liked list
-                for (String likedAuthor : authorLiked) {
-                    Timestamp ts = new Timestamp(System.currentTimeMillis());
-                    stmt1.setString(1, likedAuthor);
-                    stmt1.setTimestamp(2, ts);
-                    stmt1.executeUpdate();
-                }
-
-                //load post info
-                stmt2.setInt(1, postID);
-                stmt2.setString(2, title);
-                stmt2.setString(3, content);
-                stmt2.setTimestamp(4, Timestamp.valueOf(postingTime));
-                stmt2.setString(5, postingCity);
-                stmt2.setString(6, authorName);
-                stmt2.executeUpdate();
-
-                //load category info
-                for (String category1 : category) {
-                    stmt3.setString(1, category1);
-                    stmt3.executeUpdate();
-                }
-
-//                load post_category relation table
-                for (String category1 : category) {
-                    stmt4.setInt(1, postID);
-                    stmt4.setString(2, category1);
-                    stmt4.executeUpdate();
-                }
-
-
-//                stmt.addBatch();
-            } catch (SQLException ex) {
-                throw new RuntimeException(ex);
-            }
-        }
-    }
-
-    private static void loadReply(Replies reply) {
-        int postID = reply.getPostID();
-        String replyContent = reply.getReplyContent();
-        int replyStars = reply.getReplyStars();
-        String replyAuthor = reply.getReplyAuthor();
-        String secondaryReplyContent = reply.getSecondaryReplyContent();
-        int secondaryReplyStars = reply.getSecondaryReplyStars();
-        String secondaryReplyAuthor = reply.getSecondaryReplyAuthor();
-        if (con != null) {
-            try {
-                //pass in attributes
-//                stmt.setInt(1, Integer.parseInt(lineData[0]));
-//                stmt.setString(2, lineData[1]);
-//                stmt.setString(3, lineData[2]);
-//                stmt.setInt(4, Integer.parseInt(lineData[3]));
-//                stmt.setInt(5, Integer.parseInt(lineData[4]));
-                stmt.executeUpdate();
-            } catch (SQLException ex) {
-                throw new RuntimeException(ex);
-            }
-        }
-    }
-
-
-}
+        System.out.println("Hello world!");
+    }
+}
\ No newline at end of file
